
export PATH="$HOME/.local/bin:$PATH"
export EDITOR="/usr/bin/vim"

#############

ZSH_THEME="oldgallois"

# Prevents the bug where the command name gets printed in the output
DISABLE_AUTO_TITLE="true"

REPORTTIME=-1

# Which plugins would you like to load?
# Add wisely, as too many plugins slow down shell startup.
plugins=(git thefuck z)

source $ZSH/oh-my-zsh.sh

#############
# Aliases
#############

# Note: a lot of aliases are already defined in
# ~/.oh-my-zsh/lib/...

# Interactive mode, prompts a confirmation to prevent accidental overwriting
alias mv="mv -i"

alias rm-prefix="f(){for file in "$1"*; do mv "$file" "${file#$1}"; done; unset -f f;}; f"

alias ll="ls -alh"
alias gs="git status"

alias kill_gazebo="killall -9 gazebo & killall -9 gzserver & killall -9 gzclient"

# kill all .vscode-server processes
alias kill_vscode='ps uxa | grep .vscode-server | awk '"'"'!/grep/ {print $2}'"'"' | xargs -t kill -9'

# xclip
alias xcopy="xclip -sel c"  # copy to the clipboard
alias xpaste="xclip -o -sel clip"  # paste clipboard contents
alias xclear="xclip -sel clip < /dev/null"  # clear clipboard

# remind me that ncdu exists
du() {
    echo "Consider using ncdu...\n"
    command du "$@"
}


#############
# Misc
#############


# Kill a process using a specific port
# example usage: kill_port 8889
kill_port() {sudo kill -9 $(sudo lsof -t -i:$1)}

# Necessary to maintain colorscheme in tmux
export TERM="screen-256color"

# remove temporary/log files created by the latex compiler
# (nullglob ensures the rm command continues executing even
# if some files extensions are not found. this option is disabled
# to prevent future issues/confusions with other zsh commands)
rm_tmp_tex() {
    setopt nullglob
    rm -f *.{aux,blg,fdb_latexmk,fls,log,out,synctex.gz,toc}
    unsetopt nullglob
}

# Builds and run a standalone cpp file with C++17. Usage: cpprun foo.cpp
cpprun () {
    filename="${1%.*}"
    g++ -std=c++17 -o $filename.out $1 && ./$filename.out
    rm $filename.out
}

# Autoenv
source ~/.autoenv/activate.sh

# Log the memory usage every second to a .csv file in the home directory
# Usage: sh log_memory_usage [filename.csv]
# If no filename is provided, it defaults to 'memory_usage.csv'
log_memory_usage() {
    output_file=${1:-memory_usage.csv}
    if [[ -e "${HOME}/$output_file" ]]; then
        mv "${HOME}/$output_file" "${HOME}/${output_file}_$(date +%Y%m%d_%H%M%S)"
    fi
    echo "Date Time, Unix Timestamp, Memory Used (Bytes), Memory Usage (%)" > "${HOME}/$output_file"
    while true
    do
        current_time=$(date +"%Y-%m-%d %H:%M:%S")
        unix_timestamp=$(date +%s)
        mem_info=$(free -b | awk 'NR==2{print $2,$3}')
        read -r total used <<< "$mem_info"
        if [[ $used == 0 ]]; then
            continue
        fi
        memory_usage=$((used * 100 / total))
        printf -v memory_usage "%.2f" $memory_usage
        echo "$current_time,$unix_timestamp,$used,$memory_usage" >> "${HOME}/$output_file"
        sleep 1
    done
}

# Read a file generated with the log_memory_usage function and output
# the highest memory usage logged
# Usage: highest_memory_usage /path/to/memory_usage.csv
highest_memory_usage() {
    file_path=$1
    local highest_usage_perc=0
    local highest_usage_bytes=0
    while IFS=',' read -r unix_timestamp date_time memory_used memory_perc; do
        if [[ $memory_perc > $highest_usage_perc ]]; then
            highest_usage_perc=$memory_perc
            highest_usage_bytes=$memory_used
        fi
    done < "$file_path"
    local highest_usage_gigabytes=$(echo "scale=2; $highest_usage_bytes / 1073741824" | bc)
    echo "The highest memory usage percentage is $highest_usage_perc% ($highest_usage_gigabytes GB)"
}

# Compile a latex project using pdflatex & bibtex
# usage: all_pdflatex <filename without extension (stem)>
all_pdflatex() {
    pdflatex $1
    bibtex $1
    pdflatex $1
    pdflatex $1
}
